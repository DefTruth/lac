!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Ahocorasick	ahocorasick.py	/^class Ahocorasick(object):$/;"	c
AnalysisConfig	lac.py	/^from paddle.fluid.core import AnalysisConfig$/;"	i
Customization	custom.py	/^class Customization(object):$/;"	c
Customization	lac.py	/^from .custom import Customization$/;"	i
DEFAULT_KEY	lac.py	/^DEFAULT_KEY = _get_abs_path('key_model')$/;"	v
DEFAULT_LAC	lac.py	/^DEFAULT_LAC = _get_abs_path('lac_model')$/;"	v
DEFAULT_SEG	lac.py	/^DEFAULT_SEG = _get_abs_path('seg_model')$/;"	v
Dataset	nets.py	/^from .reader import Dataset$/;"	i
Dataset	reader.py	/^class Dataset(object):$/;"	c
DefaultArgs	utils.py	/^class DefaultArgs(object):$/;"	c
LAC	__init__.py	/^from .lac import LAC$/;"	i
LAC	cmdline.py	/^    from LAC import LAC$/;"	i
LAC	lac.py	/^class LAC(object):$/;"	c
LAC	tests/lac_test.py	/^from LAC import LAC$/;"	i
Node	ahocorasick.py	/^class Node(object):$/;"	c
Node	triedtree.py	/^class Node(object):$/;"	c
PaddleTensor	lac.py	/^from paddle.fluid.core import PaddleTensor$/;"	i
TriedTree	custom.py	/^    from .triedtree import TriedTree$/;"	i
TriedTree	custom.py	/^    from triedtree import TriedTree$/;"	i
TriedTree	triedtree.py	/^class TriedTree(object):$/;"	c
__all__	cmdline.py	/^__all__ = [$/;"	v
__future__	reader.py	/^import __future__$/;"	i
__init__	ahocorasick.py	/^    def __init__(self):$/;"	m	class:Ahocorasick
__init__	ahocorasick.py	/^    def __init__(self):$/;"	m	class:Node
__init__	custom.py	/^    def __init__(self):$/;"	m	class:Customization
__init__	lac.py	/^    def __init__(self, model_path=None, mode='lac', use_cuda=False):$/;"	m	class:LAC
__init__	reader.py	/^    def __init__(self, args, dev_count=10):$/;"	m	class:Dataset
__init__	triedtree.py	/^    def __init__(self):$/;"	m	class:Node
__init__	triedtree.py	/^    def __init__(self):$/;"	m	class:TriedTree
__init__	utils.py	/^    def __init__(self, model_path):$/;"	m	class:DefaultArgs
__slots__	ahocorasick.py	/^    __slots__ = ['next', 'fail', 'length']$/;"	v	class:Node
__slots__	triedtree.py	/^    __slots__ = ['next', 'length']$/;"	v	class:Node
_bigru_layer	nets.py	/^    def _bigru_layer(input_feature):$/;"	f	function:lex_net
_existed_params	utils.py	/^    def _existed_params(var):$/;"	f	function:init_pretraining_params
_get_abs_path	lac.py	/^def _get_abs_path(path): return os.path.normpath($/;"	f
_net_conf	nets.py	/^    def _net_conf(word, target=None):$/;"	f	function:lex_net
abs_path	utils.py	/^def abs_path(path): return os.path.join($/;"	f
absolute_import	cmdline.py	/^from __future__ import absolute_import$/;"	i
add_word	ahocorasick.py	/^    def add_word(self, word):$/;"	m	class:Ahocorasick
add_word	custom.py	/^    def add_word(self, words, sep=None):$/;"	m	class:Customization
add_word	lac.py	/^    def add_word(self, word, sep=None):$/;"	m	class:LAC
add_word	triedtree.py	/^    def add_word(self, word):$/;"	m	class:TriedTree
ah	ahocorasick.py	/^    ah = Ahocorasick()$/;"	v	class:Ahocorasick
argparse	cmdline.py	/^import argparse$/;"	i
argparse	reader.py	/^import argparse$/;"	i
args	cmdline.py	/^args = parser.parse_args()$/;"	v
args	reader.py	/^    args = parser.parse_args()$/;"	v	class:Dataset
check_cuda	utils.py	/^def check_cuda(use_cuda):$/;"	f
configparser	utils.py	/^    import ConfigParser as configparser$/;"	i
configparser	utils.py	/^    import configparser$/;"	i
create_model	nets.py	/^def create_model(args, vocab_size, num_labels, mode='train'):$/;"	f
create_paddle_predictor	lac.py	/^from paddle.fluid.core import create_paddle_predictor$/;"	i
create_pyreader	nets.py	/^def create_pyreader(args, file_name, feed_list, place,$/;"	f
custom	custom.py	/^    custom = Customization()$/;"	v	class:Customization
data_generator	reader.py	/^    data_generator = dataset.file_reader("data\/train.tsv")$/;"	v	class:Dataset
dataset	reader.py	/^    dataset = Dataset(args)$/;"	v	class:Dataset
default_encoding	_compat.py	/^default_encoding = sys.getfilesystemencoding()$/;"	v
do_train	nets.py	/^def do_train(args):$/;"	f
existed_persitables	utils.py	/^    def existed_persitables(var):$/;"	f	function:init_checkpoint
file_reader	reader.py	/^    def file_reader(self, filename, mode="train"):$/;"	m	class:Dataset
fluid	lac.py	/^import paddle.fluid as fluid$/;"	i
fluid	nets.py	/^import paddle.fluid as fluid$/;"	i
fluid	utils.py	/^import paddle.fluid as fluid$/;"	i
fun_add_word	tests/lac_test.py	/^def fun_add_word():$/;"	f
fun_seg	tests/lac_test.py	/^def fun_seg():$/;"	f
get_num_examples	reader.py	/^    def get_num_examples(self, filename):$/;"	m	class:Dataset
help	cmdline.py	/^                    help='run segment only if setting')$/;"	v
init_checkpoint	utils.py	/^def init_checkpoint(exe, init_checkpoint_path, main_program):$/;"	f
init_pretraining_params	utils.py	/^def init_pretraining_params(exe,$/;"	f
io	reader.py	/^import io$/;"	i
iteritems	_compat.py	/^    def iteritems(d): return d.iteritems()$/;"	f
iteritems	_compat.py	/^    def iteritems(d): return iter(d.items())$/;"	f
iterkeys	_compat.py	/^    def iterkeys(d): return d.iterkeys()$/;"	f
iterkeys	_compat.py	/^    def iterkeys(d): return iter(d.keys())$/;"	f
itervalues	_compat.py	/^    def itervalues(d): return d.itervalues()$/;"	f
itervalues	_compat.py	/^    def itervalues(d): return iter(d.values())$/;"	f
jieba	reader.py	/^import jieba_fast as jieba$/;"	i
label_to_ids	reader.py	/^    def label_to_ids(self, labels):$/;"	m	class:Dataset
lac	lac.py	/^    lac = LAC('lac_model')$/;"	v	class:LAC
lex_net	nets.py	/^def lex_net(word, args, vocab_size, num_labels, target=None):$/;"	f
load_customization	custom.py	/^    def load_customization(self, filename, sep=None):$/;"	m	class:Customization
load_customization	lac.py	/^    def load_customization(self, customization_file, sep=None):$/;"	m	class:LAC
load_jieba_set	reader.py	/^def load_jieba_set(set_path, delimiter="\\t"):$/;"	f
load_kv_dict	reader.py	/^def load_kv_dict(dict_path,$/;"	f
load_model	lac.py	/^    def load_model(self, model_dir):$/;"	m	class:LAC
logging	ahocorasick.py	/^import logging$/;"	i
logging	custom.py	/^import logging$/;"	i
logging	lac.py	/^import logging$/;"	i
logging	reader.py	/^import logging$/;"	i
main	cmdline.py	/^def main(args=args):$/;"	f
make	ahocorasick.py	/^    def make(self):$/;"	m	class:Ahocorasick
make	triedtree.py	/^    def make(self):$/;"	m	class:TriedTree
math	nets.py	/^import math$/;"	i
multiprocessing	nets.py	/^import multiprocessing$/;"	i
name	__init__.py	/^name = 'lac'$/;"	v
nets	lac.py	/^from . import nets$/;"	i
new_label_to_ids	reader.py	/^    def new_label_to_ids(self, labels, del_index):$/;"	m	class:Dataset
new_word_to_ids	reader.py	/^    def new_word_to_ids(self, words):$/;"	m	class:Dataset
np	lac.py	/^import numpy as np$/;"	i
np	utils.py	/^import numpy as np$/;"	i
num_labels	reader.py	/^    def num_labels(self):$/;"	m	class:Dataset
open	custom.py	/^from io import open$/;"	i
os	lac.py	/^import os$/;"	i
os	nets.py	/^import os$/;"	i
os	utils.py	/^import os$/;"	i
paddle	lac.py	/^import paddle.fluid as fluid$/;"	i
paddle	nets.py	/^import paddle$/;"	i
paddle	nets.py	/^import paddle.fluid as fluid$/;"	i
paddle	utils.py	/^import paddle.fluid as fluid$/;"	i
parse_customization	custom.py	/^    def parse_customization(self, query, lac_tags):$/;"	m	class:Customization
parse_result	lac.py	/^    def parse_result(self, lines, crf_decode, dataset, mix_data=None):$/;"	m	class:LAC
parse_seg	reader.py	/^    def parse_seg(self, line):$/;"	m	class:Dataset
parse_tag	reader.py	/^    def parse_tag(self, line):$/;"	m	class:Dataset
parser	cmdline.py	/^parser = argparse.ArgumentParser(description='LAC Init Argments')$/;"	v
parser	reader.py	/^    parser = argparse.ArgumentParser(__doc__)$/;"	v	class:Dataset
porecast_word_to_ids	reader.py	/^    def porecast_word_to_ids(self, words):$/;"	m	class:Dataset
print_arguments	utils.py	/^def print_arguments(args):$/;"	f
print_function	cmdline.py	/^from __future__ import print_function$/;"	i
print_function	utils.py	/^from __future__ import print_function$/;"	i
query	custom.py	/^    query = u"共同创造美好的新世纪——二○○一年新年贺词"$/;"	v	class:Customization
reader	lac.py	/^from . import reader$/;"	i
result	lac.py	/^    result = lac.run(test_data)$/;"	v	class:LAC
result	lac.py	/^    result = lac.run(test_data, return_tag=True)$/;"	v	class:LAC
result	lac.py	/^    result = lac.run(test_data[0])$/;"	v	class:LAC
run	lac.py	/^    def run(self, texts):$/;"	m	class:LAC
run	tests/lac_test.py	/^def run():$/;"	f
search	ahocorasick.py	/^    def search(self, content):$/;"	m	class:Ahocorasick
search	triedtree.py	/^    def search(self, content):$/;"	m	class:TriedTree
search_all	ahocorasick.py	/^    def search_all(self, content):$/;"	m	class:Ahocorasick
search_all	triedtree.py	/^    def search_all(self, content):$/;"	m	class:TriedTree
shutil	lac.py	/^import shutil$/;"	i
strdecode	_compat.py	/^def strdecode(sentence):$/;"	f
strdecode	cmdline.py	/^    from LAC._compat import strdecode$/;"	i
strdecode	custom.py	/^    from ._compat import strdecode$/;"	i
strdecode	custom.py	/^    from _compat import strdecode$/;"	i
string	ahocorasick.py	/^    string = '百度是家高科技公司'$/;"	v	class:Ahocorasick
string	triedtree.py	/^    string = '百度是家高科技公司'$/;"	v	class:TriedTree
string_types	_compat.py	/^    string_types = (str, unicode)$/;"	v
string_types	_compat.py	/^    string_types = (str,)$/;"	v
sys	_compat.py	/^import sys$/;"	i
sys	cmdline.py	/^    import sys$/;"	i
sys	utils.py	/^import sys$/;"	i
tags	custom.py	/^    tags = ['O'] * len(query)$/;"	v	class:Customization
test_data	lac.py	/^    test_data = [u'百度是一家高科技公司', u'LAC是一个优秀的分词工具', '']$/;"	v	class:LAC
test_process	nets.py	/^def test_process(exe, program, reader, test_ret):  # exe, test_program, test_reader, train_ret$/;"	f
text_type	_compat.py	/^    text_type = str$/;"	v
text_type	_compat.py	/^    text_type = unicode$/;"	v
texts2tensor	lac.py	/^    def texts2tensor(self, texts):$/;"	m	class:LAC
time	tests/lac_test.py	/^import time$/;"	i
to_lodtensor	utils.py	/^def to_lodtensor(data, place):$/;"	f
to_str	utils.py	/^def to_str(string, encoding="utf-8"):$/;"	f
tqdm	tests/lac_test.py	/^from tqdm import tqdm$/;"	i
train	lac.py	/^    def train(self, model_save_dir, train_data, test_data=None, iter_num=10, thread_num=10):$/;"	m	class:LAC
train	tests/lac_test.py	/^def train():$/;"	f
tree	triedtree.py	/^    tree = TriedTree()$/;"	v	class:TriedTree
unicode_literals	cmdline.py	/^from __future__ import unicode_literals$/;"	i
utils	lac.py	/^from . import utils$/;"	i
utils	nets.py	/^from . import utils$/;"	i
version	__init__.py	/^version = "2.0.5"$/;"	v
version_info	__init__.py	/^version_info = (2, 0, 5, 0)$/;"	v
vocab_size	reader.py	/^    def vocab_size(self):$/;"	m	class:Dataset
word_to_ids	reader.py	/^    def word_to_ids(self, words):$/;"	m	class:Dataset
words	triedtree.py	/^    words = ["百度", "家", "家家", "高科技", "技公", "科技", "科技公司"]$/;"	v	class:TriedTree
wrapper	reader.py	/^        def wrapper():$/;"	f	function:Dataset.file_reader
x	ahocorasick.py	/^    x = ["百度", "家", "高科技", "科技", "科技公司"]$/;"	v	class:Ahocorasick
xrange	_compat.py	/^    xrange = range$/;"	v
